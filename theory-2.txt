Go’s Concurrency Building Blocks --->

Goroutines --->
Every Go program has at least one goroutine: the main goroutine, which is automatically created and started
when the process begins.
Put very simply, a goroutine is a function that is running concurrently (remember: not necessarily in parallel!)
alongside other code. You can start one simply by placing the go keyword before a function:
func main() {
    go sayHello()
    // continue doing other things
}

func sayHello() {
    fmt.Println("hello")
}
Anonymous functions work too! Here’s an example that does the same thing as the previous example; however,
instead of creating a goroutine from a function, we create a goroutine from an anonymous function:
func main() {
    go func() {
        fmt.Println("hello")
    }()
    // continue doing other things
}
Alternatively, you can assign the function to a variable and call the anonymous function like this:
func main() {
    sayHello := func() {
        fmt.Println("hello")
    }
    go sayHello()
    // continue doing other things
}

So let’s look at what’s happening behind the scenes here: how do goroutines actually work? Are they OS threads?
Green threads? How many can we create?
Goroutines are unique to Go (though some other languages have a concurrency primitive that is similar).
They’re not OS threads, and they’re not exactly green threads(virtual threads)—threads that are managed by a language’s
runtime—they’re a higher level of abstraction known as coroutines. Coroutines are simply concurrent
subroutines (functions, closures, or methods in Go) that are nonpreemptive—that is, they cannot be
interrupted. Instead, coroutines have multiple points throughout which allow for suspension or reentry.

What makes goroutines unique to Go are their deep integration with Go’s runtime. Goroutines don’t define
their own suspension or reentry points; Go’s runtime observes the runtime behavior of goroutines and
automatically suspends them when they block and then resumes them when they become unblocked. In a way
this makes them preemptable, but only at points where the goroutine has become blocked. It is an elegant
partnership between the runtime and a goroutine’s logic. Thus, goroutines can be considered a special
class of coroutine.

Go’s mechanism for hosting goroutines is an implementation of what’s called an M:N scheduler, which means it
maps M green threads to N OS threads. Goroutines are then scheduled onto the green threads. When we have
more goroutines than green threads available, the scheduler handles the distribution of the goroutines
across the available threads and ensures that when these goroutines become blocked, other goroutines
can be run.
Go follows a model of concurrency called the fork-join model.1 The word fork refers to the fact that at
any point in the program, it can split off a child branch of execution to be run concurrently with its parent.
The word join refers to the fact that at some point in the future, these concurrent branches of execution will
join back together. Where the child rejoins the parent is called a join point.

The go statement is how Go performs a fork, and the forked threads of execution are goroutines.
func main() {
    sayHello := func() {
        fmt.Println("hello")
    }
    go sayHello()
    // continue doing other things
}
Here, the sayHello function will be run on its own goroutine, while the rest of the program continues
executing. In this example, there is no join point. The goroutine executing sayHello will simply exit at
some undetermined time in the future, and the rest of the program will have already continued executing.

However, there is one problem with this example: as written, it’s undetermined whether the sayHello function
will ever be run at all. The goroutine will be created and scheduled with Go’s runtime to execute, but it
may not actually get a chance to run before the main goroutine exits.

In order to a create a join point, you have to synchronize the main goroutine and the sayHello goroutine.
This can be done in a number of ways, but I’ll use “The sync Package”: sync.WaitGroup.
Right now it’s not important to understand how this example creates a join point, only that it creates one
between the two goroutines. Here’s a correct version of our example:
func main() {
    var wg sync.WaitGroup
    sayHello := func() {
        defer wg.Done()
        fmt.Println("hello")
    }
    wg.Add(1)
    go sayHello()
    wg.Wait() // join point
}
This example will deterministically block the main goroutine until the goroutine hosting the sayHello
function terminates.
Let’s shift our attention to closures. Closures close around the lexical scope they are created in,
thereby capturing variables. If you run a closure in a goroutine, does the closure operate on a copy of
these variables, or the original references? Let’s give it a try and see:
func main() {
    var wg sync.WaitGroup
    salutation := "hello"
    wg.Add(1)
    go func() {
        defer wg.Done()
        salutation = "welcome" // Here we see the goroutine modifying the value of the variable salutation.
    }()
    wg.Wait()
    fmt.Println(salutation)
}
What do you think the value of salutation will be: “hello” or “welcome”? Let’s run it and find out: -> welcome
Follow example-1.go file


The sync Package --->



